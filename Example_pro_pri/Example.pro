# Стандартные переменные (QT, TARGET и т.д.), их значения, флаги и всё остальное по qmake : https://doc.qt.io/qt-5/qmake-manual.html
# += просто добавляет, а *= добавляет если такого значения ещё нет # https://doc.qt.io/qt-5/qmake-language.html
# Структуру .pro и .pri файлов делаем такой же, как в данном примере.
# Порядок следования переменных делаем именно такой, как в данном примере.

# Если не указывать TARGET, но бинарник будет назван так же, как .pro файл. Для максимальной автоматизации сборки желательно не указывать TARGET
# Указывать тип библиотеки можно как static или staticlib и shared или dll. Желательно использовать static или shared как более единообразный вариант.
# ВСЕГДА добавляем warn_on - предупреждения надо исправлять, а не просто отключать. Если же ВРЕМЕННО их все надо скрыть, то warn_on просто меняется на warn_off.
# Переменная c++11 (или любой другой номер стандарта) определяет используемый стандарт.
TARGET = Example
TEMPLATE = lib
CONFIG += static warn_on c++latest

# Пример флагов. НЕ используйте += -fpermissive (т.е. НЕ разрешайте выводить некоторые ошибки как предупреждения), пишите адекватный код.
QMAKE_CXXFLAGS -= -fpermissive
QMAKE_CFLAGS -= -fpermissive
QMAKE_CFLAGS_WARN_ON *= -Wall -Wextra
QMAKE_CXXFLAGS_WARN_ON *= -Wall -Wextra

# Если проект является библиотекой, то .pri файл должен содержать всё нужное (QT, INCLUDEPATH, LIBS и т.д.), чтобы можно было в другом проекте подключить всё только одним инклюдом.
# Для приложений (TEMPLATE=app) подключение всех инклюдов, модулей и т.д. тоже желательно выносить в отдельный .pri файл для консистентности и удобства.
# global.pri должен содержать все общие вещи, типа путей, флагов и т.п. Подключаться должен всегда первым.
# EXAMPLE_SRC и остальные базовые пути должны определяться в .qmake.conf
include($$EXAMPLE_SRC/global.pri)
include($$PWD/$${TARGET}.pri)

# LIBS нужен для приложений и динамических библиотек. Для консистентности можно прописывать и в статических библиотеках, но технически не обязательно ввиду того как они собираются.
# reverse() нужен потому что таков механизм работы компоновщика и порядок добавления библиотек через .pri файлы # https://habr.com/ru/post/150327/
LIBS += $$LIBS_paths
LIBS += $$reverse(LIBS_libs)

# Пути лучше всего определять через global.pri, чтобы все проекты складывали файлы по одному конкретному шаблону. В случае особой надобности, можно их переопределить здесь.
# Оданако для библиотек DESTDIR и TARGET переопределяются в .pri файле, т.к. это требуется для PRE_TARGETDEPS, и если их ещё раз переопределить здесь, то что-то сломается.
#DESTDIR      = $$PWD/bin
#OBJECTS_DIR  = $$PWD/obj
#MOC_DIR      = $$PWD/moc
UI_DIR       = $$PWD/ui
RCC_DIR      = $$PWD/qrc

TRANSLATIONS += $$PWD/translations/ru_RU.ts

DEFINES += QT_DEPRECATED_WARNINGS

HEADERS += \
    ExampleFormClass.h

SOURCES += \
    main.cpp \
    ExampleFormClass.cpp

FORMS += \
    ExampleFormClass.ui

RESOURCES += \
    Example.qrc
